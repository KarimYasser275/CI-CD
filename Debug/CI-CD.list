
CI-CD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001424  08001424  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001424  08001424  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001424  08001424  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001424  08001424  00011424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001428  08001428  00011428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800142c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001438  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001438  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007499  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001477  00000000  00000000  00027511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  00028988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e4  00000000  00000000  00029278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001655a  00000000  00000000  0002995c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009570  00000000  00000000  0003feb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083d5f  00000000  00000000  00049426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002490  00000000  00000000  000cd188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000cf618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080013e0 	.word	0x080013e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080013e0 	.word	0x080013e0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f992 	bl	8000478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f803 	bl	800015e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f846 	bl	80001e8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800015c:	e7fe      	b.n	800015c <main+0x10>

0800015e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800015e:	b580      	push	{r7, lr}
 8000160:	b090      	sub	sp, #64	; 0x40
 8000162:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000164:	f107 0318 	add.w	r3, r7, #24
 8000168:	2228      	movs	r2, #40	; 0x28
 800016a:	2100      	movs	r1, #0
 800016c:	4618      	mov	r0, r3
 800016e:	f001 f90b 	bl	8001388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000172:	1d3b      	adds	r3, r7, #4
 8000174:	2200      	movs	r2, #0
 8000176:	601a      	str	r2, [r3, #0]
 8000178:	605a      	str	r2, [r3, #4]
 800017a:	609a      	str	r2, [r3, #8]
 800017c:	60da      	str	r2, [r3, #12]
 800017e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000180:	2301      	movs	r3, #1
 8000182:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000188:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800018a:	2300      	movs	r3, #0
 800018c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800018e:	2301      	movs	r3, #1
 8000190:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000192:	2302      	movs	r3, #2
 8000194:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800019c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fa78 	bl	800069c <HAL_RCC_OscConfig>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001b2:	f000 f84d 	bl	8000250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001b6:	230f      	movs	r3, #15
 80001b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ba:	2302      	movs	r3, #2
 80001bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001be:	2300      	movs	r3, #0
 80001c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2102      	movs	r1, #2
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fce5 	bl	8000ba0 <HAL_RCC_ClockConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001dc:	f000 f838 	bl	8000250 <Error_Handler>
  }
}
 80001e0:	bf00      	nop
 80001e2:	3740      	adds	r7, #64	; 0x40
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <MX_GPIO_Init+0x40>)
 80001f0:	699b      	ldr	r3, [r3, #24]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <MX_GPIO_Init+0x40>)
 80001f4:	f043 0320 	orr.w	r3, r3, #32
 80001f8:	6193      	str	r3, [r2, #24]
 80001fa:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <MX_GPIO_Init+0x40>)
 80001fc:	699b      	ldr	r3, [r3, #24]
 80001fe:	f003 0320 	and.w	r3, r3, #32
 8000202:	607b      	str	r3, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <MX_GPIO_Init+0x40>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a07      	ldr	r2, [pc, #28]	; (8000228 <MX_GPIO_Init+0x40>)
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	6193      	str	r3, [r2, #24]
 8000212:	4b05      	ldr	r3, [pc, #20]	; (8000228 <MX_GPIO_Init+0x40>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	f003 0304 	and.w	r3, r3, #4
 800021a:	603b      	str	r3, [r7, #0]
 800021c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	40021000 	.word	0x40021000

0800022c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a04      	ldr	r2, [pc, #16]	; (800024c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d101      	bne.n	8000242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800023e:	f000 f931 	bl	80004a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40000800 	.word	0x40000800

08000250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000254:	b672      	cpsid	i
}
 8000256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000258:	e7fe      	b.n	8000258 <Error_Handler+0x8>
	...

0800025c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <HAL_MspInit+0x5c>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <HAL_MspInit+0x5c>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <HAL_MspInit+0x5c>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
 8000278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <HAL_MspInit+0x5c>)
 800027c:	69db      	ldr	r3, [r3, #28]
 800027e:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <HAL_MspInit+0x5c>)
 8000280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000284:	61d3      	str	r3, [r2, #28]
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <HAL_MspInit+0x5c>)
 8000288:	69db      	ldr	r3, [r3, #28]
 800028a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <HAL_MspInit+0x60>)
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <HAL_MspInit+0x60>)
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000
 80002bc:	40010000 	.word	0x40010000

080002c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08e      	sub	sp, #56	; 0x38
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80002c8:	2300      	movs	r3, #0
 80002ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80002cc:	2300      	movs	r3, #0
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80002d0:	2300      	movs	r3, #0
 80002d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80002d6:	4b34      	ldr	r3, [pc, #208]	; (80003a8 <HAL_InitTick+0xe8>)
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	4a33      	ldr	r2, [pc, #204]	; (80003a8 <HAL_InitTick+0xe8>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	61d3      	str	r3, [r2, #28]
 80002e2:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <HAL_InitTick+0xe8>)
 80002e4:	69db      	ldr	r3, [r3, #28]
 80002e6:	f003 0304 	and.w	r3, r3, #4
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80002ee:	f107 0210 	add.w	r2, r7, #16
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4611      	mov	r1, r2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fdad 	bl	8000e58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80002fe:	6a3b      	ldr	r3, [r7, #32]
 8000300:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000304:	2b00      	cmp	r3, #0
 8000306:	d103      	bne.n	8000310 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000308:	f000 fd92 	bl	8000e30 <HAL_RCC_GetPCLK1Freq>
 800030c:	6378      	str	r0, [r7, #52]	; 0x34
 800030e:	e004      	b.n	800031a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000310:	f000 fd8e 	bl	8000e30 <HAL_RCC_GetPCLK1Freq>
 8000314:	4603      	mov	r3, r0
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800031a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800031c:	4a23      	ldr	r2, [pc, #140]	; (80003ac <HAL_InitTick+0xec>)
 800031e:	fba2 2303 	umull	r2, r3, r2, r3
 8000322:	0c9b      	lsrs	r3, r3, #18
 8000324:	3b01      	subs	r3, #1
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000328:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <HAL_InitTick+0xf0>)
 800032a:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <HAL_InitTick+0xf4>)
 800032c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800032e:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <HAL_InitTick+0xf0>)
 8000330:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000334:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000336:	4a1e      	ldr	r2, [pc, #120]	; (80003b0 <HAL_InitTick+0xf0>)
 8000338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800033a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800033c:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <HAL_InitTick+0xf0>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000342:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <HAL_InitTick+0xf0>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000348:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <HAL_InitTick+0xf0>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800034e:	4818      	ldr	r0, [pc, #96]	; (80003b0 <HAL_InitTick+0xf0>)
 8000350:	f000 fdd0 	bl	8000ef4 <HAL_TIM_Base_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800035a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800035e:	2b00      	cmp	r3, #0
 8000360:	d11b      	bne.n	800039a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000362:	4813      	ldr	r0, [pc, #76]	; (80003b0 <HAL_InitTick+0xf0>)
 8000364:	f000 fe1e 	bl	8000fa4 <HAL_TIM_Base_Start_IT>
 8000368:	4603      	mov	r3, r0
 800036a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800036e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000372:	2b00      	cmp	r3, #0
 8000374:	d111      	bne.n	800039a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000376:	201e      	movs	r0, #30
 8000378:	f000 f981 	bl	800067e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b0f      	cmp	r3, #15
 8000380:	d808      	bhi.n	8000394 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000382:	2200      	movs	r2, #0
 8000384:	6879      	ldr	r1, [r7, #4]
 8000386:	201e      	movs	r0, #30
 8000388:	f000 f95d 	bl	8000646 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <HAL_InitTick+0xf8>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	e002      	b.n	800039a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000394:	2301      	movs	r3, #1
 8000396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800039a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3738      	adds	r7, #56	; 0x38
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000
 80003ac:	431bde83 	.word	0x431bde83
 80003b0:	20000028 	.word	0x20000028
 80003b4:	40000800 	.word	0x40000800
 80003b8:	20000004 	.word	0x20000004

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <NMI_Handler+0x4>

080003c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <HardFault_Handler+0x4>

080003c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <MemManage_Handler+0x4>

080003ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <BusFault_Handler+0x4>

080003d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <UsageFault_Handler+0x4>

080003da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr

080003e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr

080003f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
	...

0800040c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000410:	4802      	ldr	r0, [pc, #8]	; (800041c <TIM4_IRQHandler+0x10>)
 8000412:	f000 fe19 	bl	8001048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000028 	.word	0x20000028

08000420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800042c:	f7ff fff8 	bl	8000420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000432:	490c      	ldr	r1, [pc, #48]	; (8000464 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000434:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000438:	e002      	b.n	8000440 <LoopCopyDataInit>

0800043a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800043c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043e:	3304      	adds	r3, #4

08000440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000444:	d3f9      	bcc.n	800043a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000446:	4a09      	ldr	r2, [pc, #36]	; (800046c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000448:	4c09      	ldr	r4, [pc, #36]	; (8000470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800044c:	e001      	b.n	8000452 <LoopFillZerobss>

0800044e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000450:	3204      	adds	r2, #4

08000452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000454:	d3fb      	bcc.n	800044e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000456:	f000 ff9f 	bl	8001398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045a:	f7ff fe77 	bl	800014c <main>
  bx lr
 800045e:	4770      	bx	lr
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000468:	0800142c 	.word	0x0800142c
  ldr r2, =_sbss
 800046c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000470:	20000074 	.word	0x20000074

08000474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC1_2_IRQHandler>
	...

08000478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <HAL_Init+0x28>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <HAL_Init+0x28>)
 8000482:	f043 0310 	orr.w	r3, r3, #16
 8000486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000488:	2003      	movs	r0, #3
 800048a:	f000 f8d1 	bl	8000630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800048e:	200f      	movs	r0, #15
 8000490:	f7ff ff16 	bl	80002c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000494:	f7ff fee2 	bl	800025c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000498:	2300      	movs	r3, #0
}
 800049a:	4618      	mov	r0, r3
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40022000 	.word	0x40022000

080004a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <HAL_IncTick+0x1c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <HAL_IncTick+0x20>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4413      	add	r3, r2
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <HAL_IncTick+0x20>)
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	20000008 	.word	0x20000008
 80004c4:	20000070 	.word	0x20000070

080004c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return uwTick;
 80004cc:	4b02      	ldr	r3, [pc, #8]	; (80004d8 <HAL_GetTick+0x10>)
 80004ce:	681b      	ldr	r3, [r3, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000070 	.word	0x20000070

080004dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <__NVIC_SetPriorityGrouping+0x44>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004f8:	4013      	ands	r3, r2
 80004fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800050c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800050e:	4a04      	ldr	r2, [pc, #16]	; (8000520 <__NVIC_SetPriorityGrouping+0x44>)
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	60d3      	str	r3, [r2, #12]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <__NVIC_GetPriorityGrouping+0x18>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	f003 0307 	and.w	r3, r3, #7
}
 8000532:	4618      	mov	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db0b      	blt.n	800056a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 021f 	and.w	r2, r3, #31
 8000558:	4906      	ldr	r1, [pc, #24]	; (8000574 <__NVIC_EnableIRQ+0x34>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	2001      	movs	r0, #1
 8000562:	fa00 f202 	lsl.w	r2, r0, r2
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	e000e100 	.word	0xe000e100

08000578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	db0a      	blt.n	80005a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	b2da      	uxtb	r2, r3
 8000590:	490c      	ldr	r1, [pc, #48]	; (80005c4 <__NVIC_SetPriority+0x4c>)
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	0112      	lsls	r2, r2, #4
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	440b      	add	r3, r1
 800059c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a0:	e00a      	b.n	80005b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4908      	ldr	r1, [pc, #32]	; (80005c8 <__NVIC_SetPriority+0x50>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f003 030f 	and.w	r3, r3, #15
 80005ae:	3b04      	subs	r3, #4
 80005b0:	0112      	lsls	r2, r2, #4
 80005b2:	b2d2      	uxtb	r2, r2
 80005b4:	440b      	add	r3, r1
 80005b6:	761a      	strb	r2, [r3, #24]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b089      	sub	sp, #36	; 0x24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	f1c3 0307 	rsb	r3, r3, #7
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	bf28      	it	cs
 80005ea:	2304      	movcs	r3, #4
 80005ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	3304      	adds	r3, #4
 80005f2:	2b06      	cmp	r3, #6
 80005f4:	d902      	bls.n	80005fc <NVIC_EncodePriority+0x30>
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3b03      	subs	r3, #3
 80005fa:	e000      	b.n	80005fe <NVIC_EncodePriority+0x32>
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	f04f 32ff 	mov.w	r2, #4294967295
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	43da      	mvns	r2, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	401a      	ands	r2, r3
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000614:	f04f 31ff 	mov.w	r1, #4294967295
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	43d9      	mvns	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	4313      	orrs	r3, r2
         );
}
 8000626:	4618      	mov	r0, r3
 8000628:	3724      	adds	r7, #36	; 0x24
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ff4f 	bl	80004dc <__NVIC_SetPriorityGrouping>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000646:	b580      	push	{r7, lr}
 8000648:	b086      	sub	sp, #24
 800064a:	af00      	add	r7, sp, #0
 800064c:	4603      	mov	r3, r0
 800064e:	60b9      	str	r1, [r7, #8]
 8000650:	607a      	str	r2, [r7, #4]
 8000652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000658:	f7ff ff64 	bl	8000524 <__NVIC_GetPriorityGrouping>
 800065c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	68b9      	ldr	r1, [r7, #8]
 8000662:	6978      	ldr	r0, [r7, #20]
 8000664:	f7ff ffb2 	bl	80005cc <NVIC_EncodePriority>
 8000668:	4602      	mov	r2, r0
 800066a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff81 	bl	8000578 <__NVIC_SetPriority>
}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	4603      	mov	r3, r0
 8000686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff57 	bl	8000540 <__NVIC_EnableIRQ>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e272      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f000 8087 	beq.w	80007ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80006bc:	4b92      	ldr	r3, [pc, #584]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f003 030c 	and.w	r3, r3, #12
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	d00c      	beq.n	80006e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006c8:	4b8f      	ldr	r3, [pc, #572]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f003 030c 	and.w	r3, r3, #12
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	d112      	bne.n	80006fa <HAL_RCC_OscConfig+0x5e>
 80006d4:	4b8c      	ldr	r3, [pc, #560]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e0:	d10b      	bne.n	80006fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006e2:	4b89      	ldr	r3, [pc, #548]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d06c      	beq.n	80007c8 <HAL_RCC_OscConfig+0x12c>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d168      	bne.n	80007c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e24c      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000702:	d106      	bne.n	8000712 <HAL_RCC_OscConfig+0x76>
 8000704:	4b80      	ldr	r3, [pc, #512]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a7f      	ldr	r2, [pc, #508]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 800070a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	e02e      	b.n	8000770 <HAL_RCC_OscConfig+0xd4>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10c      	bne.n	8000734 <HAL_RCC_OscConfig+0x98>
 800071a:	4b7b      	ldr	r3, [pc, #492]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a7a      	ldr	r2, [pc, #488]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	4b78      	ldr	r3, [pc, #480]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a77      	ldr	r2, [pc, #476]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 800072c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	e01d      	b.n	8000770 <HAL_RCC_OscConfig+0xd4>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800073c:	d10c      	bne.n	8000758 <HAL_RCC_OscConfig+0xbc>
 800073e:	4b72      	ldr	r3, [pc, #456]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a71      	ldr	r2, [pc, #452]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000748:	6013      	str	r3, [r2, #0]
 800074a:	4b6f      	ldr	r3, [pc, #444]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a6e      	ldr	r2, [pc, #440]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	e00b      	b.n	8000770 <HAL_RCC_OscConfig+0xd4>
 8000758:	4b6b      	ldr	r3, [pc, #428]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a6a      	ldr	r2, [pc, #424]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 800075e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b68      	ldr	r3, [pc, #416]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a67      	ldr	r2, [pc, #412]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800076e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d013      	beq.n	80007a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000778:	f7ff fea6 	bl	80004c8 <HAL_GetTick>
 800077c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800077e:	e008      	b.n	8000792 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000780:	f7ff fea2 	bl	80004c8 <HAL_GetTick>
 8000784:	4602      	mov	r2, r0
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	2b64      	cmp	r3, #100	; 0x64
 800078c:	d901      	bls.n	8000792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800078e:	2303      	movs	r3, #3
 8000790:	e200      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000792:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0f0      	beq.n	8000780 <HAL_RCC_OscConfig+0xe4>
 800079e:	e014      	b.n	80007ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007a0:	f7ff fe92 	bl	80004c8 <HAL_GetTick>
 80007a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007a6:	e008      	b.n	80007ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007a8:	f7ff fe8e 	bl	80004c8 <HAL_GetTick>
 80007ac:	4602      	mov	r2, r0
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	2b64      	cmp	r3, #100	; 0x64
 80007b4:	d901      	bls.n	80007ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80007b6:	2303      	movs	r3, #3
 80007b8:	e1ec      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f0      	bne.n	80007a8 <HAL_RCC_OscConfig+0x10c>
 80007c6:	e000      	b.n	80007ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d063      	beq.n	800089e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f003 030c 	and.w	r3, r3, #12
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00b      	beq.n	80007fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007e2:	4b49      	ldr	r3, [pc, #292]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f003 030c 	and.w	r3, r3, #12
 80007ea:	2b08      	cmp	r3, #8
 80007ec:	d11c      	bne.n	8000828 <HAL_RCC_OscConfig+0x18c>
 80007ee:	4b46      	ldr	r3, [pc, #280]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d116      	bne.n	8000828 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007fa:	4b43      	ldr	r3, [pc, #268]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d005      	beq.n	8000812 <HAL_RCC_OscConfig+0x176>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d001      	beq.n	8000812 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e1c0      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000812:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	4939      	ldr	r1, [pc, #228]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000822:	4313      	orrs	r3, r2
 8000824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000826:	e03a      	b.n	800089e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	691b      	ldr	r3, [r3, #16]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d020      	beq.n	8000872 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000830:	4b36      	ldr	r3, [pc, #216]	; (800090c <HAL_RCC_OscConfig+0x270>)
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000836:	f7ff fe47 	bl	80004c8 <HAL_GetTick>
 800083a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800083c:	e008      	b.n	8000850 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800083e:	f7ff fe43 	bl	80004c8 <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	2b02      	cmp	r3, #2
 800084a:	d901      	bls.n	8000850 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800084c:	2303      	movs	r3, #3
 800084e:	e1a1      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 0302 	and.w	r3, r3, #2
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f0      	beq.n	800083e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	4927      	ldr	r1, [pc, #156]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 800086c:	4313      	orrs	r3, r2
 800086e:	600b      	str	r3, [r1, #0]
 8000870:	e015      	b.n	800089e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000872:	4b26      	ldr	r3, [pc, #152]	; (800090c <HAL_RCC_OscConfig+0x270>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000878:	f7ff fe26 	bl	80004c8 <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800087e:	e008      	b.n	8000892 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000880:	f7ff fe22 	bl	80004c8 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b02      	cmp	r3, #2
 800088c:	d901      	bls.n	8000892 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800088e:	2303      	movs	r3, #3
 8000890:	e180      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1f0      	bne.n	8000880 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d03a      	beq.n	8000920 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d019      	beq.n	80008e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_RCC_OscConfig+0x274>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008b8:	f7ff fe06 	bl	80004c8 <HAL_GetTick>
 80008bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008be:	e008      	b.n	80008d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008c0:	f7ff fe02 	bl	80004c8 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d901      	bls.n	80008d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80008ce:	2303      	movs	r3, #3
 80008d0:	e160      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_RCC_OscConfig+0x26c>)
 80008d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f0      	beq.n	80008c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 faea 	bl	8000eb8 <RCC_Delay>
 80008e4:	e01c      	b.n	8000920 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_RCC_OscConfig+0x274>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008ec:	f7ff fdec 	bl	80004c8 <HAL_GetTick>
 80008f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008f2:	e00f      	b.n	8000914 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008f4:	f7ff fde8 	bl	80004c8 <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d908      	bls.n	8000914 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000902:	2303      	movs	r3, #3
 8000904:	e146      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000
 800090c:	42420000 	.word	0x42420000
 8000910:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000914:	4b92      	ldr	r3, [pc, #584]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1e9      	bne.n	80008f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	2b00      	cmp	r3, #0
 800092a:	f000 80a6 	beq.w	8000a7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800092e:	2300      	movs	r3, #0
 8000930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000932:	4b8b      	ldr	r3, [pc, #556]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10d      	bne.n	800095a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b88      	ldr	r3, [pc, #544]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a87      	ldr	r2, [pc, #540]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b85      	ldr	r3, [pc, #532]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000956:	2301      	movs	r3, #1
 8000958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800095a:	4b82      	ldr	r3, [pc, #520]	; (8000b64 <HAL_RCC_OscConfig+0x4c8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000962:	2b00      	cmp	r3, #0
 8000964:	d118      	bne.n	8000998 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000966:	4b7f      	ldr	r3, [pc, #508]	; (8000b64 <HAL_RCC_OscConfig+0x4c8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a7e      	ldr	r2, [pc, #504]	; (8000b64 <HAL_RCC_OscConfig+0x4c8>)
 800096c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000972:	f7ff fda9 	bl	80004c8 <HAL_GetTick>
 8000976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000978:	e008      	b.n	800098c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800097a:	f7ff fda5 	bl	80004c8 <HAL_GetTick>
 800097e:	4602      	mov	r2, r0
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b64      	cmp	r3, #100	; 0x64
 8000986:	d901      	bls.n	800098c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000988:	2303      	movs	r3, #3
 800098a:	e103      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800098c:	4b75      	ldr	r3, [pc, #468]	; (8000b64 <HAL_RCC_OscConfig+0x4c8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0f0      	beq.n	800097a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d106      	bne.n	80009ae <HAL_RCC_OscConfig+0x312>
 80009a0:	4b6f      	ldr	r3, [pc, #444]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	4a6e      	ldr	r2, [pc, #440]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6213      	str	r3, [r2, #32]
 80009ac:	e02d      	b.n	8000a0a <HAL_RCC_OscConfig+0x36e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10c      	bne.n	80009d0 <HAL_RCC_OscConfig+0x334>
 80009b6:	4b6a      	ldr	r3, [pc, #424]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009b8:	6a1b      	ldr	r3, [r3, #32]
 80009ba:	4a69      	ldr	r2, [pc, #420]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009bc:	f023 0301 	bic.w	r3, r3, #1
 80009c0:	6213      	str	r3, [r2, #32]
 80009c2:	4b67      	ldr	r3, [pc, #412]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009c4:	6a1b      	ldr	r3, [r3, #32]
 80009c6:	4a66      	ldr	r2, [pc, #408]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009c8:	f023 0304 	bic.w	r3, r3, #4
 80009cc:	6213      	str	r3, [r2, #32]
 80009ce:	e01c      	b.n	8000a0a <HAL_RCC_OscConfig+0x36e>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	2b05      	cmp	r3, #5
 80009d6:	d10c      	bne.n	80009f2 <HAL_RCC_OscConfig+0x356>
 80009d8:	4b61      	ldr	r3, [pc, #388]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009da:	6a1b      	ldr	r3, [r3, #32]
 80009dc:	4a60      	ldr	r2, [pc, #384]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6213      	str	r3, [r2, #32]
 80009e4:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009e6:	6a1b      	ldr	r3, [r3, #32]
 80009e8:	4a5d      	ldr	r2, [pc, #372]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6213      	str	r3, [r2, #32]
 80009f0:	e00b      	b.n	8000a0a <HAL_RCC_OscConfig+0x36e>
 80009f2:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009f4:	6a1b      	ldr	r3, [r3, #32]
 80009f6:	4a5a      	ldr	r2, [pc, #360]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	6213      	str	r3, [r2, #32]
 80009fe:	4b58      	ldr	r3, [pc, #352]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	4a57      	ldr	r2, [pc, #348]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000a04:	f023 0304 	bic.w	r3, r3, #4
 8000a08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d015      	beq.n	8000a3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a12:	f7ff fd59 	bl	80004c8 <HAL_GetTick>
 8000a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a18:	e00a      	b.n	8000a30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a1a:	f7ff fd55 	bl	80004c8 <HAL_GetTick>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d901      	bls.n	8000a30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e0b1      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a30:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000a32:	6a1b      	ldr	r3, [r3, #32]
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0ee      	beq.n	8000a1a <HAL_RCC_OscConfig+0x37e>
 8000a3c:	e014      	b.n	8000a68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a3e:	f7ff fd43 	bl	80004c8 <HAL_GetTick>
 8000a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a44:	e00a      	b.n	8000a5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a46:	f7ff fd3f 	bl	80004c8 <HAL_GetTick>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d901      	bls.n	8000a5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e09b      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a5c:	4b40      	ldr	r3, [pc, #256]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1ee      	bne.n	8000a46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000a68:	7dfb      	ldrb	r3, [r7, #23]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d105      	bne.n	8000a7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a3b      	ldr	r2, [pc, #236]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f000 8087 	beq.w	8000b92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a84:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d061      	beq.n	8000b54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d146      	bne.n	8000b26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a98:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <HAL_RCC_OscConfig+0x4cc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a9e:	f7ff fd13 	bl	80004c8 <HAL_GetTick>
 8000aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aa4:	e008      	b.n	8000ab8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000aa6:	f7ff fd0f 	bl	80004c8 <HAL_GetTick>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d901      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e06d      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f0      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a1b      	ldr	r3, [r3, #32]
 8000ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000acc:	d108      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	4921      	ldr	r1, [pc, #132]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000adc:	4313      	orrs	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a19      	ldr	r1, [r3, #32]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af0:	430b      	orrs	r3, r1
 8000af2:	491b      	ldr	r1, [pc, #108]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000af4:	4313      	orrs	r3, r2
 8000af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <HAL_RCC_OscConfig+0x4cc>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000afe:	f7ff fce3 	bl	80004c8 <HAL_GetTick>
 8000b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b04:	e008      	b.n	8000b18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b06:	f7ff fcdf 	bl	80004c8 <HAL_GetTick>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d901      	bls.n	8000b18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e03d      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f0      	beq.n	8000b06 <HAL_RCC_OscConfig+0x46a>
 8000b24:	e035      	b.n	8000b92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_RCC_OscConfig+0x4cc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b2c:	f7ff fccc 	bl	80004c8 <HAL_GetTick>
 8000b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b32:	e008      	b.n	8000b46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b34:	f7ff fcc8 	bl	80004c8 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d901      	bls.n	8000b46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e026      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_RCC_OscConfig+0x4c4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f0      	bne.n	8000b34 <HAL_RCC_OscConfig+0x498>
 8000b52:	e01e      	b.n	8000b92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d107      	bne.n	8000b6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e019      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40007000 	.word	0x40007000
 8000b68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_RCC_OscConfig+0x500>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d106      	bne.n	8000b8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d001      	beq.n	8000b92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e0d0      	b.n	8000d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000bb4:	4b6a      	ldr	r3, [pc, #424]	; (8000d60 <HAL_RCC_ClockConfig+0x1c0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0307 	and.w	r3, r3, #7
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d910      	bls.n	8000be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc2:	4b67      	ldr	r3, [pc, #412]	; (8000d60 <HAL_RCC_ClockConfig+0x1c0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f023 0207 	bic.w	r2, r3, #7
 8000bca:	4965      	ldr	r1, [pc, #404]	; (8000d60 <HAL_RCC_ClockConfig+0x1c0>)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bd2:	4b63      	ldr	r3, [pc, #396]	; (8000d60 <HAL_RCC_ClockConfig+0x1c0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d001      	beq.n	8000be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e0b8      	b.n	8000d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d020      	beq.n	8000c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d005      	beq.n	8000c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bfc:	4b59      	ldr	r3, [pc, #356]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4a58      	ldr	r2, [pc, #352]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 0308 	and.w	r3, r3, #8
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c14:	4b53      	ldr	r3, [pc, #332]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	4a52      	ldr	r2, [pc, #328]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c20:	4b50      	ldr	r3, [pc, #320]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	494d      	ldr	r1, [pc, #308]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d040      	beq.n	8000cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d107      	bne.n	8000c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c46:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d115      	bne.n	8000c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e07f      	b.n	8000d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d107      	bne.n	8000c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c5e:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d109      	bne.n	8000c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e073      	b.n	8000d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e06b      	b.n	8000d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c7e:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f023 0203 	bic.w	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4936      	ldr	r1, [pc, #216]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c90:	f7ff fc1a 	bl	80004c8 <HAL_GetTick>
 8000c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c96:	e00a      	b.n	8000cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c98:	f7ff fc16 	bl	80004c8 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e053      	b.n	8000d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 020c 	and.w	r2, r3, #12
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d1eb      	bne.n	8000c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <HAL_RCC_ClockConfig+0x1c0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d210      	bcs.n	8000cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <HAL_RCC_ClockConfig+0x1c0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 0207 	bic.w	r2, r3, #7
 8000cd6:	4922      	ldr	r1, [pc, #136]	; (8000d60 <HAL_RCC_ClockConfig+0x1c0>)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <HAL_RCC_ClockConfig+0x1c0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d001      	beq.n	8000cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e032      	b.n	8000d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d008      	beq.n	8000d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	4916      	ldr	r1, [pc, #88]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d009      	beq.n	8000d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	490e      	ldr	r1, [pc, #56]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d2e:	f000 f821 	bl	8000d74 <HAL_RCC_GetSysClockFreq>
 8000d32:	4602      	mov	r2, r0
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_RCC_ClockConfig+0x1c4>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	490a      	ldr	r1, [pc, #40]	; (8000d68 <HAL_RCC_ClockConfig+0x1c8>)
 8000d40:	5ccb      	ldrb	r3, [r1, r3]
 8000d42:	fa22 f303 	lsr.w	r3, r2, r3
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_RCC_ClockConfig+0x1cc>)
 8000d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_RCC_ClockConfig+0x1d0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fab6 	bl	80002c0 <HAL_InitTick>

  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40022000 	.word	0x40022000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	080013f8 	.word	0x080013f8
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d002      	beq.n	8000da4 <HAL_RCC_GetSysClockFreq+0x30>
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d003      	beq.n	8000daa <HAL_RCC_GetSysClockFreq+0x36>
 8000da2:	e027      	b.n	8000df4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8000da6:	613b      	str	r3, [r7, #16]
      break;
 8000da8:	e027      	b.n	8000dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	0c9b      	lsrs	r3, r3, #18
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000db4:	5cd3      	ldrb	r3, [r2, r3]
 8000db6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d010      	beq.n	8000de4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	0c5b      	lsrs	r3, r3, #17
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8000dd6:	fb03 f202 	mul.w	r2, r3, r2
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e004      	b.n	8000dee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000de8:	fb02 f303 	mul.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	613b      	str	r3, [r7, #16]
      break;
 8000df2:	e002      	b.n	8000dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8000df6:	613b      	str	r3, [r7, #16]
      break;
 8000df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000dfa:	693b      	ldr	r3, [r7, #16]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	007a1200 	.word	0x007a1200
 8000e10:	08001410 	.word	0x08001410
 8000e14:	08001420 	.word	0x08001420
 8000e18:	003d0900 	.word	0x003d0900

08000e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e20:	4b02      	ldr	r3, [pc, #8]	; (8000e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	20000000 	.word	0x20000000

08000e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e34:	f7ff fff2 	bl	8000e1c <HAL_RCC_GetHCLKFreq>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	4903      	ldr	r1, [pc, #12]	; (8000e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e46:	5ccb      	ldrb	r3, [r1, r3]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000
 8000e54:	08001408 	.word	0x08001408

08000e58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	220f      	movs	r2, #15
 8000e66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_RCC_GetClockConfig+0x58>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0203 	and.w	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_RCC_GetClockConfig+0x58>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_RCC_GetClockConfig+0x58>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_RCC_GetClockConfig+0x58>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	08db      	lsrs	r3, r3, #3
 8000e92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0207 	and.w	r2, r3, #7
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <RCC_Delay+0x34>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <RCC_Delay+0x38>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	0a5b      	lsrs	r3, r3, #9
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ed4:	bf00      	nop
  }
  while (Delay --);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	60fa      	str	r2, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f9      	bne.n	8000ed4 <RCC_Delay+0x1c>
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	10624dd3 	.word	0x10624dd3

08000ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e041      	b.n	8000f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d106      	bne.n	8000f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f839 	bl	8000f92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2202      	movs	r2, #2
 8000f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f000 f9b4 	bl	80012a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d001      	beq.n	8000fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e03a      	b.n	8001032 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a18      	ldr	r2, [pc, #96]	; (800103c <HAL_TIM_Base_Start_IT+0x98>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00e      	beq.n	8000ffc <HAL_TIM_Base_Start_IT+0x58>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe6:	d009      	beq.n	8000ffc <HAL_TIM_Base_Start_IT+0x58>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_TIM_Base_Start_IT+0x9c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d004      	beq.n	8000ffc <HAL_TIM_Base_Start_IT+0x58>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a13      	ldr	r2, [pc, #76]	; (8001044 <HAL_TIM_Base_Start_IT+0xa0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d111      	bne.n	8001020 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b06      	cmp	r3, #6
 800100c:	d010      	beq.n	8001030 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0201 	orr.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800101e:	e007      	b.n	8001030 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40000400 	.word	0x40000400
 8001044:	40000800 	.word	0x40000800

08001048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b02      	cmp	r3, #2
 800105c:	d122      	bne.n	80010a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b02      	cmp	r3, #2
 800106a:	d11b      	bne.n	80010a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f06f 0202 	mvn.w	r2, #2
 8001074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f8ed 	bl	800126a <HAL_TIM_IC_CaptureCallback>
 8001090:	e005      	b.n	800109e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f8e0 	bl	8001258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f8ef 	bl	800127c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d122      	bne.n	80010f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d11b      	bne.n	80010f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f06f 0204 	mvn.w	r2, #4
 80010c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2202      	movs	r2, #2
 80010ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f8c3 	bl	800126a <HAL_TIM_IC_CaptureCallback>
 80010e4:	e005      	b.n	80010f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8b6 	bl	8001258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f8c5 	bl	800127c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b08      	cmp	r3, #8
 8001104:	d122      	bne.n	800114c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b08      	cmp	r3, #8
 8001112:	d11b      	bne.n	800114c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f06f 0208 	mvn.w	r2, #8
 800111c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2204      	movs	r2, #4
 8001122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f899 	bl	800126a <HAL_TIM_IC_CaptureCallback>
 8001138:	e005      	b.n	8001146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f88c 	bl	8001258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f89b 	bl	800127c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	2b10      	cmp	r3, #16
 8001158:	d122      	bne.n	80011a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b10      	cmp	r3, #16
 8001166:	d11b      	bne.n	80011a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0210 	mvn.w	r2, #16
 8001170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2208      	movs	r2, #8
 8001176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f86f 	bl	800126a <HAL_TIM_IC_CaptureCallback>
 800118c:	e005      	b.n	800119a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f862 	bl	8001258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f871 	bl	800127c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d10e      	bne.n	80011cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d107      	bne.n	80011cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f06f 0201 	mvn.w	r2, #1
 80011c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff f830 	bl	800022c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	2b80      	cmp	r3, #128	; 0x80
 80011d8:	d10e      	bne.n	80011f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e4:	2b80      	cmp	r3, #128	; 0x80
 80011e6:	d107      	bne.n	80011f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f8bf 	bl	8001376 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	2b40      	cmp	r3, #64	; 0x40
 8001204:	d10e      	bne.n	8001224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001210:	2b40      	cmp	r3, #64	; 0x40
 8001212:	d107      	bne.n	8001224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800121c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f835 	bl	800128e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	2b20      	cmp	r3, #32
 8001230:	d10e      	bne.n	8001250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b20      	cmp	r3, #32
 800123e:	d107      	bne.n	8001250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f06f 0220 	mvn.w	r2, #32
 8001248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f88a 	bl	8001364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a29      	ldr	r2, [pc, #164]	; (8001358 <TIM_Base_SetConfig+0xb8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d00b      	beq.n	80012d0 <TIM_Base_SetConfig+0x30>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012be:	d007      	beq.n	80012d0 <TIM_Base_SetConfig+0x30>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a26      	ldr	r2, [pc, #152]	; (800135c <TIM_Base_SetConfig+0xbc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d003      	beq.n	80012d0 <TIM_Base_SetConfig+0x30>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <TIM_Base_SetConfig+0xc0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d108      	bne.n	80012e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <TIM_Base_SetConfig+0xb8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00b      	beq.n	8001302 <TIM_Base_SetConfig+0x62>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f0:	d007      	beq.n	8001302 <TIM_Base_SetConfig+0x62>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <TIM_Base_SetConfig+0xbc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d003      	beq.n	8001302 <TIM_Base_SetConfig+0x62>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <TIM_Base_SetConfig+0xc0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d108      	bne.n	8001314 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4313      	orrs	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <TIM_Base_SetConfig+0xb8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d103      	bne.n	8001348 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	615a      	str	r2, [r3, #20]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	40012c00 	.word	0x40012c00
 800135c:	40000400 	.word	0x40000400
 8001360:	40000800 	.word	0x40000800

08001364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <memset>:
 8001388:	4603      	mov	r3, r0
 800138a:	4402      	add	r2, r0
 800138c:	4293      	cmp	r3, r2
 800138e:	d100      	bne.n	8001392 <memset+0xa>
 8001390:	4770      	bx	lr
 8001392:	f803 1b01 	strb.w	r1, [r3], #1
 8001396:	e7f9      	b.n	800138c <memset+0x4>

08001398 <__libc_init_array>:
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	2600      	movs	r6, #0
 800139c:	4d0c      	ldr	r5, [pc, #48]	; (80013d0 <__libc_init_array+0x38>)
 800139e:	4c0d      	ldr	r4, [pc, #52]	; (80013d4 <__libc_init_array+0x3c>)
 80013a0:	1b64      	subs	r4, r4, r5
 80013a2:	10a4      	asrs	r4, r4, #2
 80013a4:	42a6      	cmp	r6, r4
 80013a6:	d109      	bne.n	80013bc <__libc_init_array+0x24>
 80013a8:	f000 f81a 	bl	80013e0 <_init>
 80013ac:	2600      	movs	r6, #0
 80013ae:	4d0a      	ldr	r5, [pc, #40]	; (80013d8 <__libc_init_array+0x40>)
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <__libc_init_array+0x44>)
 80013b2:	1b64      	subs	r4, r4, r5
 80013b4:	10a4      	asrs	r4, r4, #2
 80013b6:	42a6      	cmp	r6, r4
 80013b8:	d105      	bne.n	80013c6 <__libc_init_array+0x2e>
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
 80013bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c0:	4798      	blx	r3
 80013c2:	3601      	adds	r6, #1
 80013c4:	e7ee      	b.n	80013a4 <__libc_init_array+0xc>
 80013c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ca:	4798      	blx	r3
 80013cc:	3601      	adds	r6, #1
 80013ce:	e7f2      	b.n	80013b6 <__libc_init_array+0x1e>
 80013d0:	08001424 	.word	0x08001424
 80013d4:	08001424 	.word	0x08001424
 80013d8:	08001424 	.word	0x08001424
 80013dc:	08001428 	.word	0x08001428

080013e0 <_init>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	bf00      	nop
 80013e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e6:	bc08      	pop	{r3}
 80013e8:	469e      	mov	lr, r3
 80013ea:	4770      	bx	lr

080013ec <_fini>:
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	bf00      	nop
 80013f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f2:	bc08      	pop	{r3}
 80013f4:	469e      	mov	lr, r3
 80013f6:	4770      	bx	lr
